#-*- Python -*-
#
# Copyright 2017 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Main installer build SConscript for
# Google Earth Enterprise Fusion.
# This scons script takes two optional command line arguments:
#   scons [local] [installer_dir=DIRECTORY] [remote_password=password_for_rsync]
#     where "local" specifies that the installer is only built for the current
#                   architecture using RPMS available locally
#           installer_dir=DIRECTORY allows the user to specify the output
#           directory for the resulting installer tarball
#           remote_password=password_for_rsync lets the user to specify the
#           password for build machine (default null string "" which works when
#                                       no password is required for rsync.)
# Sconscript for building Google Earth Fusion Installer packages.
# Assumption: Current working directory is //client/googleclient/geo/earth_enterprise/installer.

import sys
import os
import time

from geeFusionPackages import GetPackageInfo, GetNoArchPackageInfo
from installAnywhereUtils import BuildInstallAnywhereTarBall
from installAnywhereUtils import BuildFusionToolsTarBall
from installAnywhereUtils import HardLinkTutorial
from packageUtils import ExecEcho

# Optional Command Line argument
installer_dir = ARGUMENTS.get('installer_dir', 'dist/')
remote_password = ARGUMENTS.get('remote_password', '')
branch = ARGUMENTS.get('branch', 'trunk')

# The Version of the Fusion Package
# Read the Fusion Version number
def FusionVersionNumber(source):
   try:
       spec = open(source, 'r')
       line = spec.readline()
       while (len(line)):
          if line[0] != '#':
              version = line.strip()
              if (len(version)):
                  return version
          line = spec.readline()
       print "Unable to find Fusion Version Number"
       Exit(1)
   except Exception, exp:
       print "Unable to find Fusion Version Number:", exp

ge_fusion_version_basic = FusionVersionNumber('../src/fusion_version.txt')
ge_fusion_version = ge_fusion_version_basic + "-" + time.strftime("%Y%m%d")

# Command Line Targets
# Gather RPMS from remote machines for all architectures.
print("Building GEE Fusion " + ge_fusion_version + " from build machines");

# Location where RPMS, SRPMS and misc files need to be unpacked for
# the InstallAnywhere installer build process.
install_anywhere_package_dir = "./lib/"
install_anywhere_misc_dir = "./lib/misc/"
install_anywhere_srpm_dir = "./lib/SRPMS/"

# Where the sync'd/built RPMS/SRPMS live after build/rsync.
packages_dir = "../rpms/"
rpm_dir = packages_dir
srpm_dir = packages_dir + "SRPMS/"
sync_dir = "tmp_install/x86_64"

# Other source control directories of interest
root_dir = "../"

# Temp. fusion installer directory - files prepared for packaging.
tmp_fusion_install_dir = "/tmp/fusion_%s_install" % branch

# Action to copy the backup script to '/tmp/../install' folder.
copy_backup_script_cmd = ('mkdir -p %s/install && '
                          'cp -f %s %s' % (tmp_fusion_install_dir, 'Scripts/geserver_backup.sh',
                          '%s/install' % tmp_fusion_install_dir))

ExecEcho(copy_backup_script_cmd)

tar_cf_root = 'tar --owner=root --group=root -cf'

# Create fusion_libs tar file.
fusion_libs_tar_command = (
    'cd %s/fusion/opt/google/lib && %s fusion_libs.tar *' %
    (tmp_fusion_install_dir, tar_cf_root))
ExecEcho(fusion_libs_tar_command)

# Create server_libs tar file.
server_libs_tar_command = (
    'cd %s/server/opt/google/lib && %s server_libs.tar *' %
    (tmp_fusion_install_dir, tar_cf_root))
ExecEcho(server_libs_tar_command)

# Create common_libs tar file
common_libs_tar_command = (
    'cd %s/common/opt/google/lib && %s common_libs.tar *' %
    (tmp_fusion_install_dir, tar_cf_root))
ExecEcho(common_libs_tar_command)

# Create common_qt_libs tar file
common_qt_libs_tar_command = (
    'cd %s/common/opt/google/qt/lib && %s common_qt_libs.tar *' %
    (tmp_fusion_install_dir, tar_cf_root))
ExecEcho(common_qt_libs_tar_command)

# Create common_libs64 tar file
path_to_lib64 = os.path.join(tmp_fusion_install_dir, 'common/opt/google/lib64')
if os.path.exists(path_to_lib64):
  common_libs64_tar_command = (
      'cd %s && %s common_libs64.tar *' % (path_to_lib64, tar_cf_root))
ExecEcho(common_libs64_tar_command)

#TODO: (?)consider to move the building of portable linux
# installer somewhere or add parameter for script to manage portable build.
# Seems we have separate action for portable linux build.

# Step 0: Build
enterprise_root = Dir("#/..").abspath
portable_linux_installer_cmd = (
    "%s/legacy_installer/Scripts/portable/create_linux_installer.sh "
    "%s/common/opt/google/gepython "
    "%s/src/fusion/portableglobe/servers "
    "%s/src/fusion/portableglobe/globes "
    "%s/third_party/tornado/tornado-0.2.tar.gz "
    "%sGMEPortableLinuxInstaller-%s" % (
        enterprise_root, tmp_fusion_install_dir, enterprise_root, enterprise_root,
        enterprise_root, installer_dir, ge_fusion_version))

ExecEcho(portable_linux_installer_cmd)

# Step 1: Sync the install files from build agent machines.
# Note: tmp_install/x86_64 is hard coded in install anywhere.
# But still it is a relative directory, and since root directory for builds
# will be unique, it is still OK.
sync_command = ('rm -rf %s && mkdir -p %s && rsync -rtl %s/ %s' %
                (sync_dir, sync_dir, tmp_fusion_install_dir, sync_dir))
ExecEcho(sync_command)


# Step 2: HARDLINK latest tutorials in place for the installer
HardLinkTutorial()

# Step 3: Build InstallAnywhere installer for Fusion and Server.
BuildInstallAnywhereTarBall(ge_fusion_version_basic,
                            ge_fusion_version, installer_dir)

# Step 4: Build InstallAnywhere installer for the Fusion Tools.
BuildFusionToolsTarBall(ge_fusion_version_basic,
                        ge_fusion_version, installer_dir)


# Note: prefer to keep it since it can be useful for analyzing
# any discrepancies in the prepared installer directory tree.

# Step 5: Cleanup
# Remove temp fusion install directory
#rm_tmp_fusion_install_command = ('rm -rf %s' % tmp_fusion_install_dir)
#ExecEcho(rm_tmp_fusion_install_command)

# Remove fusion install tar-archive (remote build).
#rm_tmp_fusion_install_tarball_command = ('rm -rf %s.tar.gz' % tmp_fusion_install_dir)
#ExecEcho(rm_tmp_fusion_install_command)
